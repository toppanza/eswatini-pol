{
  "sksl": {
    "entrypoint": "particle_effect_fragment_main",
    "shader": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform float animationValue;\nuniform float particleLifetime;\nuniform float fadeOutDuration;\nuniform float particlesInRow;\nuniform float particlesInColumn;\nuniform float particleSpeed;\nuniform vec2 uSize;\nuniform shader uImageTexture;\nuniform half2 uImageTexture_size;\n\nvec4 fragColor;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nfloat FLT_flutter_local_delayFromParticleCenterPos(float x)\n{\n    return (1.0 - particleLifetime) * x;\n}\n\nint FLT_flutter_local_calculateInitialParticleIndex(vec2 point, float angle, float animationValue_1, float particleWidth, float particleHeight)\n{\n    float x0 = (point.x - ((animationValue_1 * cos(angle)) * particleSpeed)) / (1.0 - (((1.0 - particleLifetime) * cos(angle)) * particleSpeed));\n    float param = x0;\n    float delay = FLT_flutter_local_delayFromParticleCenterPos(param);\n    float y0 = point.y - (((animationValue_1 - delay) * sin(angle)) * particleSpeed);\n    bool _113 = angle <= (-1.57079637050628662109375);\n    bool _120;\n    if (_113)\n    {\n        _120 = point.x >= x0;\n    }\n    else\n    {\n        _120 = _113;\n    }\n    if (_120)\n    {\n        return int(point.x / particleWidth) + (int(point.y / particleHeight) * int(1.0 / particleWidth));\n    }\n    bool _140 = angle >= (-1.57079637050628662109375);\n    bool _147;\n    if (_140)\n    {\n        _147 = point.x < x0;\n    }\n    else\n    {\n        _147 = _140;\n    }\n    if (_147)\n    {\n        return int(point.x / particleWidth) + (int(point.y / particleHeight) * int(1.0 / particleWidth));\n    }\n    return int(x0 / particleWidth) + (int(y0 / particleHeight) * int(1.0 / particleWidth));\n}\n\nfloat FLT_flutter_local_randomAngle(int i)\n{\n    float randomValue = fract(sin((float(i) * 12.98980045318603515625) + 78.233001708984375) * 43758.546875);\n    return (-2.2000000476837158203125) + ((floor(randomValue * 10.0) * 1.440000057220458984375) / 10.0);\n}\n\nvoid FLT_main()\n{\n    vec2 uv = FLT_flutter_local_FlutterFragCoord() / uSize;\n    float particleWidth = 1.0 / particlesInRow;\n    float particleHeight = 1.0 / particlesInColumn;\n    float particlesCount = (1.0 / particleWidth) * (1.0 / particleHeight);\n    for (float searchMovementAngle = -2.2000000476837158203125; searchMovementAngle <= (-0.7599999904632568359375); searchMovementAngle += 0.143999993801116943359375)\n    {\n        vec2 param = uv;\n        float param_1 = searchMovementAngle;\n        float param_2 = animationValue;\n        float param_3 = particleWidth;\n        float param_4 = particleHeight;\n        int i_1 = FLT_flutter_local_calculateInitialParticleIndex(param, param_1, param_2, param_3, param_4);\n        bool _225 = i_1 < 0;\n        bool _233;\n        if (!_225)\n        {\n            _233 = float(i_1) >= particlesCount;\n        }\n        else\n        {\n            _233 = _225;\n        }\n        if (_233)\n        {\n            continue;\n        }\n        int param_5 = i_1;\n        float angle = FLT_flutter_local_randomAngle(param_5);\n        vec2 particleCenterPos = vec2((mod(float(i_1), 1.0 / particleWidth) * particleWidth) + (particleWidth / 2.0), (float(int(float(i_1) / (1.0 / particleWidth))) * particleHeight) + (particleHeight / 2.0));\n        float param_6 = particleCenterPos.x;\n        float delay = FLT_flutter_local_delayFromParticleCenterPos(param_6);\n        float adjustedTime = max(0.0, animationValue - delay);\n        vec2 zeroPointPixelPos = vec2(uv.x - ((adjustedTime * cos(angle)) * particleSpeed), uv.y - ((adjustedTime * sin(angle)) * particleSpeed));\n        bool _304 = zeroPointPixelPos.x >= (particleCenterPos.x - (particleWidth / 2.0));\n        bool _315;\n        if (_304)\n        {\n            _315 = zeroPointPixelPos.x <= (particleCenterPos.x + (particleWidth / 2.0));\n        }\n        else\n        {\n            _315 = _304;\n        }\n        bool _326;\n        if (_315)\n        {\n            _326 = zeroPointPixelPos.y >= (particleCenterPos.y - (particleHeight / 2.0));\n        }\n        else\n        {\n            _326 = _315;\n        }\n        bool _337;\n        if (_326)\n        {\n            _337 = zeroPointPixelPos.y <= (particleCenterPos.y + (particleHeight / 2.0));\n        }\n        else\n        {\n            _337 = _326;\n        }\n        if (_337)\n        {\n            vec4 zeroPointPixelColor = uImageTexture.eval(uImageTexture_size * ( zeroPointPixelPos));\n            float alpha = zeroPointPixelColor.w;\n            float fadeOutLivetime = max(0.0, adjustedTime - (particleLifetime - fadeOutDuration));\n            fragColor = zeroPointPixelColor * (1.0 - (fadeOutLivetime / fadeOutDuration));\n            return;\n        }\n    }\n    fragColor = vec4(0.0);\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
    "stage": 1,
    "uniforms": [
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 0,
        "name": "animationValue",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 1,
        "name": "particleLifetime",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 2,
        "name": "fadeOutDuration",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 3,
        "name": "particlesInRow",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 4,
        "name": "particlesInColumn",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 5,
        "name": "particleSpeed",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 6,
        "name": "uSize",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 0,
        "columns": 1,
        "location": 7,
        "name": "uImageTexture",
        "rows": 1,
        "type": 12
      }
    ]
  }
}